// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/activate/{key}": {
            "post": {
                "description": "Activates a user account using the activation key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Activate a user account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Activation key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Account successfully activated",
                        "schema": {
                            "$ref": "#/definitions/dtos.StatusResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/change_email/task": {
            "post": {
                "description": "Initiates the process of changing the user's email by sending a verification email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Initiate email change",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003cJWT token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "New email address",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.ChangeEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Verification email sent",
                        "schema": {
                            "$ref": "#/definitions/dtos.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dtos.ValidationErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "New email is the same as the old one or already in use",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/change_email/{key}": {
            "post": {
                "description": "Changes the user's email after verifying the key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Change user's email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Change email key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email changed successfully",
                        "schema": {
                            "$ref": "#/definitions/dtos.StatusResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or invalid key",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/change_password": {
            "post": {
                "description": "Changes the user's password after verifying the old password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Change user's password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003cJWT token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Password change details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "$ref": "#/definitions/dtos.StatusResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dtos.ValidationErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or invalid old password",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticates a user and returns JWT tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Authenticate a user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT tokens",
                        "schema": {
                            "$ref": "#/definitions/dtos.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dtos.ValidationErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials or account not activated",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/me": {
            "post": {
                "description": "Returns the current user's information based on the JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get current user's information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003cJWT token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User information",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Refreshes the JWT token using a valid refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh JWT token",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New JWT token",
                        "schema": {
                            "$ref": "#/definitions/dtos.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dtos.ValidationErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid refresh token",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Registers a new user and sends an activation email.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully registered, activation email sent",
                        "schema": {
                            "$ref": "#/definitions/dtos.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dtos.ValidationErrorResponse"
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/reset/task": {
            "post": {
                "description": "Initiates the process of resetting the user's password by sending a reset email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Initiate password reset",
                "parameters": [
                    {
                        "description": "Credential",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.ResetPasswordTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reset email sent",
                        "schema": {
                            "$ref": "#/definitions/dtos.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/reset/{key}": {
            "post": {
                "description": "Resets the user's password using a valid reset key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Reset user's password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reset password key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New password",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset successfully",
                        "schema": {
                            "$ref": "#/definitions/dtos.StatusResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dtos.ValidationErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or invalid key",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/update": {
            "patch": {
                "description": "Updates user information based on the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Update user information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003cJWT token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User information to update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User information updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dtos.StatusResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dtos.ValidationErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/roadmap": {
            "get": {
                "description": "Returns a list of topics for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roadmap"
                ],
                "summary": "Get topics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003cJWT token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of topics",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Topic"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/roadmap/info/theme/{theme_id}": {
            "get": {
                "description": "Returns info of theme without authorization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roadmap"
                ],
                "summary": "Get theme info",
                "responses": {
                    "200": {
                        "description": "Theme info",
                        "schema": {
                            "$ref": "#/definitions/models.Theme"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/roadmap/info/topic/{topic_id}": {
            "get": {
                "description": "Returns info of topic without authorization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roadmap"
                ],
                "summary": "Get topic info",
                "responses": {
                    "200": {
                        "description": "Topic info",
                        "schema": {
                            "$ref": "#/definitions/models.Topic"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/roadmap/problems/{topic_id}/{theme_id}": {
            "get": {
                "description": "Returns a list of problems for a specific theme, generated by AI",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roadmap"
                ],
                "summary": "Get problems",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Topic ID",
                        "name": "topic_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Theme ID",
                        "name": "theme_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer \u003cJWT token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of problems",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Problem"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Theme or topic not found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "AI request error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/roadmap/resolve": {
            "post": {
                "description": "Increments the user's score and adds an answer to a problem after verifying the answer with AI",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roadmap"
                ],
                "summary": "Increment user score and add answer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003cJWT token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Answer details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.IncreaseUserScoreAndAddAnswerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Answer verification result",
                        "schema": {
                            "$ref": "#/definitions/services.PromptProblemResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dtos.ValidationErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Problem not found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "AI request error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/roadmap/{topic_id}": {
            "get": {
                "description": "Returns a list of themes for a specific topic, sorted by user progress and AI recommendations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roadmap"
                ],
                "summary": "Get themes",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Topic ID",
                        "name": "topic_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer \u003cJWT token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of themes",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Theme"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Topic not found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "AI request error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/roadmap/{topic_id}/{theme_id}": {
            "get": {
                "description": "Returns detailed information about a specific theme, including problems and AI-generated content",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roadmap"
                ],
                "summary": "Get theme details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Topic ID",
                        "name": "topic_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Theme ID",
                        "name": "theme_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer \u003cJWT token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Theme details",
                        "schema": {
                            "$ref": "#/definitions/dtos.ThemeResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Theme or topic not found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "AI request error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/utils/compile": {
            "post": {
                "description": "Compile code by AI",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "utils"
                ],
                "summary": "Compile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003cJWT token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Code for compiler",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.CompileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Compiled code",
                        "schema": {
                            "$ref": "#/definitions/dtos.ResultResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dtos.ValidationErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "AI request error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dtos.ChangeEmailRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 100
                }
            }
        },
        "dtos.ChangePasswordRequest": {
            "type": "object",
            "required": [
                "old_password",
                "password"
            ],
            "properties": {
                "old_password": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dtos.CompileRequest": {
            "type": "object",
            "required": [
                "code"
            ],
            "properties": {
                "code": {
                    "type": "string"
                }
            }
        },
        "dtos.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "dtos.IncreaseUserScoreAndAddAnswerRequest": {
            "type": "object",
            "required": [
                "answer",
                "problem_id"
            ],
            "properties": {
                "answer": {
                    "type": "string"
                },
                "problem_id": {
                    "type": "integer"
                }
            }
        },
        "dtos.LoginRequest": {
            "type": "object",
            "required": [
                "credential",
                "password"
            ],
            "properties": {
                "credential": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dtos.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dtos.RefreshTokenRequest": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "dtos.RegisterRequest": {
            "type": "object",
            "required": [
                "chat_gpt_token",
                "email",
                "name",
                "number",
                "password"
            ],
            "properties": {
                "chat_gpt_token": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "maxLength": 100
                },
                "name": {
                    "type": "string",
                    "maxLength": 100
                },
                "number": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 8
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "dtos.ResetPasswordRequest": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "password": {
                    "type": "string"
                }
            }
        },
        "dtos.ResetPasswordTaskRequest": {
            "type": "object",
            "required": [
                "credential"
            ],
            "properties": {
                "credential": {
                    "type": "string"
                }
            }
        },
        "dtos.ResultResponse": {
            "type": "object",
            "properties": {
                "result": {
                    "type": "string"
                }
            }
        },
        "dtos.StatusResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "dtos.ThemeResponse": {
            "type": "object",
            "properties": {
                "problems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Problem"
                    }
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "dtos.TokenResponse": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "dtos.UpdateUserRequest": {
            "type": "object"
        },
        "dtos.ValidationErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "models.Problem": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "question": {
                    "type": "string"
                },
                "theme": {
                    "$ref": "#/definitions/models.Theme"
                },
                "theme_id": {
                    "type": "integer"
                }
            }
        },
        "models.Theme": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "scores": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "topic": {
                    "$ref": "#/definitions/models.Topic"
                },
                "topic_id": {
                    "type": "integer"
                }
            }
        },
        "models.Topic": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "scores": {
                    "type": "integer"
                },
                "themes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Theme"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "chat_gpt_model": {
                    "type": "string"
                },
                "chat_gpt_token": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "number": {
                    "type": "string"
                }
            }
        },
        "services.PromptProblemResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "ok": {
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "https://educgpt.ru",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Educ-GPT API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

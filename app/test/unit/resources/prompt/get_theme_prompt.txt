Расскажи подробно по теме: %s. Учитывай прогресс пользователя: он уже изучил темы %s и решил задачи %s. Ответ должен включать теорию и примеры кода. Если тема узкая, текст должен быть не менее 30000 символов. Подготовь 10 задач по теме, включая теоретические и практические. Задачи не должны дублировать уже решенные (%s). Ответ должен быть в формате JSON: {text: <теория с примерами кода>, problems: [{question: <текст задачи>, languages: <список языков через ; или пустая строка для теории>, is_theory: <true/false>}]}. Задачи должны быть адаптированы под уровень пользователя и не привязаны к конкретному языку, если тема универсальна. Пример списка языков: Python;JavaScript;Java;C++;C#;PHP;TypeScript;Swift;Go;Kotlin;Ruby;Rust;SQL;R;Perl;Dart;Scala;Haskell;Lua;Objective-C;Shell;PowerShell;Assembly;MATLAB;Groovy;Elixir;Clojure;F#;Erlang;VBA;Delphi;Ada;Lisp;Fortran;Prolog;Cobol;Bash;Racket;Julia;Crystal;Nim;OCaml;D;Vala;Smalltalk;ABAP;ActionScript;Apex;ColdFusion;Eiffel;LabVIEW;PL/SQL;SAS;Scheme;Tcl;Verilog;VHDL;Zig. Относись к ответам на теоретические вопросы снисходительно: принимай ответ, если он не содержит ошибок, даже если он неполный. Подсказки должны направлять к правильному ответу, но не давать его напрямую.